// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package platform

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift-go"
	ipprefix0 "github.com/h3copen/h3cfibservice/gen-go/ipprefix"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = ipprefix0.GoUnusedProtection__
var GoUnusedProtection__ int;

//Enum to keep track of Client name to Client-ID mapping. Indicates which
//client-ids are used and which are available to use.
type FibClient int64
const (
  FibClient_OPENR FibClient = 786
  FibClient_CLIENT_1 FibClient = 1
  FibClient_CLIENT_2 FibClient = 2
  FibClient_CLIENT_3 FibClient = 3
  FibClient_CLIENT_4 FibClient = 4
  FibClient_CLIENT_5 FibClient = 5
)

var FibClientToName = map[FibClient]string {
  FibClient_OPENR: "OPENR",
  FibClient_CLIENT_1: "CLIENT_1",
  FibClient_CLIENT_2: "CLIENT_2",
  FibClient_CLIENT_3: "CLIENT_3",
  FibClient_CLIENT_4: "CLIENT_4",
  FibClient_CLIENT_5: "CLIENT_5",
}

var FibClientToValue = map[string]FibClient {
  "OPENR": FibClient_OPENR,
  "CLIENT_1": FibClient_CLIENT_1,
  "CLIENT_2": FibClient_CLIENT_2,
  "CLIENT_3": FibClient_CLIENT_3,
  "CLIENT_4": FibClient_CLIENT_4,
  "CLIENT_5": FibClient_CLIENT_5,
}

func (p FibClient) String() string {
  if v, ok := FibClientToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func FibClientFromString(s string) (FibClient, error) {
  if v, ok := FibClientToValue[s]; ok {
    return v, nil
  }
  return FibClient(0), fmt.Errorf("not a valid FibClient string")
}

func FibClientPtr(v FibClient) *FibClient { return &v }

//Message sent over to subscriber of Platform Event.
//eventType to indicate type of netlink event to be updated
//eventData to indicate exact object entry to be updated
//Notice: when sending out PlatformEvent make sure to send multi part messages:
//part1: header to indicate event type,
//which is 2 byte of PlatformEventType cast to unsigned int
//part2: real message
type PlatformEventType int64
const (
  PlatformEventType_LINK_EVENT PlatformEventType = 1
  PlatformEventType_ADDRESS_EVENT PlatformEventType = 2
  PlatformEventType_NEIGHBOR_EVENT PlatformEventType = 3
)

var PlatformEventTypeToName = map[PlatformEventType]string {
  PlatformEventType_LINK_EVENT: "LINK_EVENT",
  PlatformEventType_ADDRESS_EVENT: "ADDRESS_EVENT",
  PlatformEventType_NEIGHBOR_EVENT: "NEIGHBOR_EVENT",
}

var PlatformEventTypeToValue = map[string]PlatformEventType {
  "LINK_EVENT": PlatformEventType_LINK_EVENT,
  "ADDRESS_EVENT": PlatformEventType_ADDRESS_EVENT,
  "NEIGHBOR_EVENT": PlatformEventType_NEIGHBOR_EVENT,
}

func (p PlatformEventType) String() string {
  if v, ok := PlatformEventTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func PlatformEventTypeFromString(s string) (PlatformEventType, error) {
  if v, ok := PlatformEventTypeToValue[s]; ok {
    return v, nil
  }
  return PlatformEventType(0), fmt.Errorf("not a valid PlatformEventType string")
}

func PlatformEventTypePtr(v PlatformEventType) *PlatformEventType { return &v }

//Common status reporting mechanism across all services
type ServiceStatus int64
const (
  ServiceStatus_DEAD ServiceStatus = 0
  ServiceStatus_STARTING ServiceStatus = 1
  ServiceStatus_ALIVE ServiceStatus = 2
  ServiceStatus_STOPPING ServiceStatus = 3
  ServiceStatus_STOPPED ServiceStatus = 4
  ServiceStatus_WARNING ServiceStatus = 5
)

var ServiceStatusToName = map[ServiceStatus]string {
  ServiceStatus_DEAD: "DEAD",
  ServiceStatus_STARTING: "STARTING",
  ServiceStatus_ALIVE: "ALIVE",
  ServiceStatus_STOPPING: "STOPPING",
  ServiceStatus_STOPPED: "STOPPED",
  ServiceStatus_WARNING: "WARNING",
}

var ServiceStatusToValue = map[string]ServiceStatus {
  "DEAD": ServiceStatus_DEAD,
  "STARTING": ServiceStatus_STARTING,
  "ALIVE": ServiceStatus_ALIVE,
  "STOPPING": ServiceStatus_STOPPING,
  "STOPPED": ServiceStatus_STOPPED,
  "WARNING": ServiceStatus_WARNING,
}

func (p ServiceStatus) String() string {
  if v, ok := ServiceStatusToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ServiceStatusFromString(s string) (ServiceStatus, error) {
  if v, ok := ServiceStatusToValue[s]; ok {
    return v, nil
  }
  return ServiceStatus(0), fmt.Errorf("not a valid ServiceStatus string")
}

func ServiceStatusPtr(v ServiceStatus) *ServiceStatus { return &v }

// We provide simple API to publish link/address/neighbor updating events
// through PUB-SUB mechanism to all of its subscriber modules in OpenR
// 
// Attributes:
//  - IfName
//  - IfIndex
//  - IsUp
//  - Weight
type LinkEntry struct {
  IfName string `thrift:"ifName,1" db:"ifName" json:"ifName"`
  IfIndex int64 `thrift:"ifIndex,2" db:"ifIndex" json:"ifIndex"`
  IsUp bool `thrift:"isUp,3" db:"isUp" json:"isUp"`
  Weight int64 `thrift:"weight,4" db:"weight" json:"weight"`
}

func NewLinkEntry() *LinkEntry {
  return &LinkEntry{
Weight: 1,
}
}


func (p *LinkEntry) GetIfName() string {
  return p.IfName
}

func (p *LinkEntry) GetIfIndex() int64 {
  return p.IfIndex
}

func (p *LinkEntry) GetIsUp() bool {
  return p.IsUp
}

func (p *LinkEntry) GetWeight() int64 {
  return p.Weight
}
func (p *LinkEntry) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LinkEntry)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IfName = v
}
  return nil
}

func (p *LinkEntry)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IfIndex = v
}
  return nil
}

func (p *LinkEntry)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsUp = v
}
  return nil
}

func (p *LinkEntry)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Weight = v
}
  return nil
}

func (p *LinkEntry) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("LinkEntry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LinkEntry) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ifName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ifName: ", p), err) }
  if err := oprot.WriteString(string(p.IfName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ifName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ifName: ", p), err) }
  return err
}

func (p *LinkEntry) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ifIndex", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ifIndex: ", p), err) }
  if err := oprot.WriteI64(int64(p.IfIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ifIndex (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ifIndex: ", p), err) }
  return err
}

func (p *LinkEntry) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("isUp", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:isUp: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsUp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isUp (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:isUp: ", p), err) }
  return err
}

func (p *LinkEntry) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("weight", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:weight: ", p), err) }
  if err := oprot.WriteI64(int64(p.Weight)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.weight (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:weight: ", p), err) }
  return err
}

func (p *LinkEntry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LinkEntry(%+v)", *p)
}

// Attributes:
//  - IfName
//  - IpPrefix
//  - IsValid
type AddrEntry struct {
  IfName string `thrift:"ifName,1" db:"ifName" json:"ifName"`
  IpPrefix *ipprefix0.IpPrefix `thrift:"ipPrefix,2" db:"ipPrefix" json:"ipPrefix"`
  IsValid bool `thrift:"isValid,3" db:"isValid" json:"isValid"`
}

func NewAddrEntry() *AddrEntry {
  return &AddrEntry{
IpPrefix: ipprefix0.NewIpPrefix(),
}
}


func (p *AddrEntry) GetIfName() string {
  return p.IfName
}
var AddrEntry_IpPrefix_DEFAULT *ipprefix0.IpPrefix
func (p *AddrEntry) GetIpPrefix() *ipprefix0.IpPrefix {
  if !p.IsSetIpPrefix() {
    return AddrEntry_IpPrefix_DEFAULT
  }
return p.IpPrefix
}

func (p *AddrEntry) GetIsValid() bool {
  return p.IsValid
}
func (p *AddrEntry) IsSetIpPrefix() bool {
  return p.IpPrefix != nil
}

func (p *AddrEntry) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddrEntry)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IfName = v
}
  return nil
}

func (p *AddrEntry)  ReadField2(iprot thrift.Protocol) error {
  p.IpPrefix = ipprefix0.NewIpPrefix()
  if err := p.IpPrefix.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IpPrefix), err)
  }
  return nil
}

func (p *AddrEntry)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsValid = v
}
  return nil
}

func (p *AddrEntry) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddrEntry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddrEntry) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ifName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ifName: ", p), err) }
  if err := oprot.WriteString(string(p.IfName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ifName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ifName: ", p), err) }
  return err
}

func (p *AddrEntry) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ipPrefix", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ipPrefix: ", p), err) }
  if err := p.IpPrefix.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IpPrefix), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ipPrefix: ", p), err) }
  return err
}

func (p *AddrEntry) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("isValid", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:isValid: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsValid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isValid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:isValid: ", p), err) }
  return err
}

func (p *AddrEntry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddrEntry(%+v)", *p)
}

// Attributes:
//  - IfName
//  - Destination
//  - LinkAddr
//  - IsReachable
type NeighborEntry struct {
  IfName string `thrift:"ifName,1" db:"ifName" json:"ifName"`
  Destination *ipprefix0.BinaryAddress `thrift:"destination,2" db:"destination" json:"destination"`
  LinkAddr string `thrift:"linkAddr,3" db:"linkAddr" json:"linkAddr"`
  IsReachable bool `thrift:"isReachable,4" db:"isReachable" json:"isReachable"`
}

func NewNeighborEntry() *NeighborEntry {
  return &NeighborEntry{
Destination: ipprefix0.NewBinaryAddress(),
}
}


func (p *NeighborEntry) GetIfName() string {
  return p.IfName
}
var NeighborEntry_Destination_DEFAULT *ipprefix0.BinaryAddress
func (p *NeighborEntry) GetDestination() *ipprefix0.BinaryAddress {
  if !p.IsSetDestination() {
    return NeighborEntry_Destination_DEFAULT
  }
return p.Destination
}

func (p *NeighborEntry) GetLinkAddr() string {
  return p.LinkAddr
}

func (p *NeighborEntry) GetIsReachable() bool {
  return p.IsReachable
}
func (p *NeighborEntry) IsSetDestination() bool {
  return p.Destination != nil
}

func (p *NeighborEntry) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NeighborEntry)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IfName = v
}
  return nil
}

func (p *NeighborEntry)  ReadField2(iprot thrift.Protocol) error {
  p.Destination = ipprefix0.NewBinaryAddress()
  if err := p.Destination.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Destination), err)
  }
  return nil
}

func (p *NeighborEntry)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LinkAddr = v
}
  return nil
}

func (p *NeighborEntry)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsReachable = v
}
  return nil
}

func (p *NeighborEntry) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("NeighborEntry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NeighborEntry) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ifName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ifName: ", p), err) }
  if err := oprot.WriteString(string(p.IfName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ifName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ifName: ", p), err) }
  return err
}

func (p *NeighborEntry) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("destination", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:destination: ", p), err) }
  if err := p.Destination.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Destination), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:destination: ", p), err) }
  return err
}

func (p *NeighborEntry) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("linkAddr", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:linkAddr: ", p), err) }
  if err := oprot.WriteString(string(p.LinkAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.linkAddr (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:linkAddr: ", p), err) }
  return err
}

func (p *NeighborEntry) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("isReachable", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isReachable: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsReachable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isReachable (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isReachable: ", p), err) }
  return err
}

func (p *NeighborEntry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NeighborEntry(%+v)", *p)
}

// Attributes:
//  - IfIndex
//  - IsUp
//  - Networks
//  - IfName
//  - Weight
type Link struct {
  IfIndex int64 `thrift:"ifIndex,1" db:"ifIndex" json:"ifIndex"`
  IsUp bool `thrift:"isUp,2" db:"isUp" json:"isUp"`
  Networks []*ipprefix0.IpPrefix `thrift:"networks,3" db:"networks" json:"networks"`
  IfName string `thrift:"ifName,4" db:"ifName" json:"ifName"`
  Weight int64 `thrift:"weight,5" db:"weight" json:"weight"`
}

func NewLink() *Link {
  return &Link{
Weight: 1,
}
}


func (p *Link) GetIfIndex() int64 {
  return p.IfIndex
}

func (p *Link) GetIsUp() bool {
  return p.IsUp
}

func (p *Link) GetNetworks() []*ipprefix0.IpPrefix {
  return p.Networks
}

func (p *Link) GetIfName() string {
  return p.IfName
}

func (p *Link) GetWeight() int64 {
  return p.Weight
}
func (p *Link) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Link)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IfIndex = v
}
  return nil
}

func (p *Link)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsUp = v
}
  return nil
}

func (p *Link)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ipprefix0.IpPrefix, 0, size)
  p.Networks =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := ipprefix0.NewIpPrefix()
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Networks = append(p.Networks, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Link)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IfName = v
}
  return nil
}

func (p *Link)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Weight = v
}
  return nil
}

func (p *Link) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Link"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Link) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ifIndex", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ifIndex: ", p), err) }
  if err := oprot.WriteI64(int64(p.IfIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ifIndex (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ifIndex: ", p), err) }
  return err
}

func (p *Link) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("isUp", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:isUp: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsUp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isUp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:isUp: ", p), err) }
  return err
}

func (p *Link) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("networks", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:networks: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Networks)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Networks {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:networks: ", p), err) }
  return err
}

func (p *Link) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ifName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ifName: ", p), err) }
  if err := oprot.WriteString(string(p.IfName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ifName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ifName: ", p), err) }
  return err
}

func (p *Link) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("weight", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:weight: ", p), err) }
  if err := oprot.WriteI64(int64(p.Weight)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.weight (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:weight: ", p), err) }
  return err
}

func (p *Link) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Link(%+v)", *p)
}

// Attributes:
//  - EventType
//  - EventData
type PlatformEvent struct {
  EventType PlatformEventType `thrift:"eventType,1" db:"eventType" json:"eventType"`
  EventData []byte `thrift:"eventData,2" db:"eventData" json:"eventData"`
}

func NewPlatformEvent() *PlatformEvent {
  return &PlatformEvent{}
}


func (p *PlatformEvent) GetEventType() PlatformEventType {
  return p.EventType
}

func (p *PlatformEvent) GetEventData() []byte {
  return p.EventData
}
func (p *PlatformEvent) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PlatformEvent)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := PlatformEventType(v)
  p.EventType = temp
}
  return nil
}

func (p *PlatformEvent)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EventData = v
}
  return nil
}

func (p *PlatformEvent) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PlatformEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlatformEvent) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("eventType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:eventType: ", p), err) }
  if err := oprot.WriteI32(int32(p.EventType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:eventType: ", p), err) }
  return err
}

func (p *PlatformEvent) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("eventData", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:eventData: ", p), err) }
  if err := oprot.WriteBinary(p.EventData); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventData (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:eventData: ", p), err) }
  return err
}

func (p *PlatformEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlatformEvent(%+v)", *p)
}

// Attributes:
//  - Message
type PlatformError struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewPlatformError() *PlatformError {
  return &PlatformError{}
}


func (p *PlatformError) GetMessage() string {
  return p.Message
}
func (p *PlatformError) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PlatformError)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *PlatformError) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PlatformError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlatformError) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *PlatformError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlatformError(%+v)", *p)
}

func (p *PlatformError) Error() string {
  return p.String()
}

