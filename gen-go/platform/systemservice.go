// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package platform

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift-go"
	ipprefix0 "github.com/h3copen/h3cfibservice/gen-go/ipprefix"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = ipprefix0.GoUnusedProtection__
type SystemService interface {  //Thrift Service API definitions for on-box system information like links,
  //addresses and neighbors. OpenR leverages links and address information as
  //a part of link discovery and uses it to perform neighbor discovery on
  //retrieved links. There is also PUB/SUB mechanism over which updates can be
  //relayed to OpenR in realtime.

  // SystemService client can query the following items:
  // 1. query all links keyed by interface names
  // 2. query all reachable neighbors
  GetAllLinks() (r []*Link, err error)
  GetAllNeighbors() (r []*NeighborEntry, err error)
  // Backward compatibility has been considered
  // As of now all the production platforms use our own SystemHandler
  // New platforms need implement those interfaces based on the platform APIs
  // 
  // Parameters:
  //  - Iface
  //  - Addrs
  AddIfaceAddresses(iface string, addrs []*ipprefix0.IpPrefix) (err error)
  // Parameters:
  //  - Iface
  //  - Addrs
  RemoveIfaceAddresses(iface string, addrs []*ipprefix0.IpPrefix) (err error)
  // Parameters:
  //  - Iface
  //  - Family
  //  - Scope
  //  - Addrs
  SyncIfaceAddresses(iface string, family int16, scope int16, addrs []*ipprefix0.IpPrefix) (err error)
  // Parameters:
  //  - Iface
  //  - Family
  //  - Scope
  GetIfaceAddresses(iface string, family int16, scope int16) (r []*ipprefix0.IpPrefix, err error)
}

//Thrift Service API definitions for on-box system information like links,
//addresses and neighbors. OpenR leverages links and address information as
//a part of link discovery and uses it to perform neighbor discovery on
//retrieved links. There is also PUB/SUB mechanism over which updates can be
//relayed to OpenR in realtime.
type SystemServiceClient struct {
  Transport thrift.Transport
  ProtocolFactory thrift.ProtocolFactory
  InputProtocol thrift.Protocol
  OutputProtocol thrift.Protocol
  SeqId int32
}

func (client *SystemServiceClient) Close() error {
  return client.Transport.Close()
}

func NewSystemServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *SystemServiceClient {
  return &SystemServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewSystemServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *SystemServiceClient {
  return &SystemServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// SystemService client can query the following items:
// 1. query all links keyed by interface names
// 2. query all reachable neighbors
func (p *SystemServiceClient) GetAllLinks() (r []*Link, err error) {
  if err = p.sendGetAllLinks(); err != nil { return }
  return p.recvGetAllLinks()
}

func (p *SystemServiceClient) sendGetAllLinks()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllLinks", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SystemServiceGetAllLinksArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SystemServiceClient) recvGetAllLinks() (value []*Link, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllLinks" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getAllLinks failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getAllLinks failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllLinks failed: invalid message type")
    return
  }
  result := SystemServiceGetAllLinksResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  value = result.GetSuccess()
  return
}

func (p *SystemServiceClient) GetAllNeighbors() (r []*NeighborEntry, err error) {
  if err = p.sendGetAllNeighbors(); err != nil { return }
  return p.recvGetAllNeighbors()
}

func (p *SystemServiceClient) sendGetAllNeighbors()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllNeighbors", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SystemServiceGetAllNeighborsArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SystemServiceClient) recvGetAllNeighbors() (value []*NeighborEntry, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllNeighbors" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getAllNeighbors failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getAllNeighbors failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllNeighbors failed: invalid message type")
    return
  }
  result := SystemServiceGetAllNeighborsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  value = result.GetSuccess()
  return
}

// Backward compatibility has been considered
// As of now all the production platforms use our own SystemHandler
// New platforms need implement those interfaces based on the platform APIs
// 
// Parameters:
//  - Iface
//  - Addrs
func (p *SystemServiceClient) AddIfaceAddresses(iface string, addrs []*ipprefix0.IpPrefix) (err error) {
  if err = p.sendAddIfaceAddresses(iface, addrs); err != nil { return }
  return p.recvAddIfaceAddresses()
}

func (p *SystemServiceClient) sendAddIfaceAddresses(iface string, addrs []*ipprefix0.IpPrefix)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addIfaceAddresses", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SystemServiceAddIfaceAddressesArgs{
  Iface : iface,
  Addrs : addrs,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SystemServiceClient) recvAddIfaceAddresses() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addIfaceAddresses" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addIfaceAddresses failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addIfaceAddresses failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addIfaceAddresses failed: invalid message type")
    return
  }
  result := SystemServiceAddIfaceAddressesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  return
}

// Parameters:
//  - Iface
//  - Addrs
func (p *SystemServiceClient) RemoveIfaceAddresses(iface string, addrs []*ipprefix0.IpPrefix) (err error) {
  if err = p.sendRemoveIfaceAddresses(iface, addrs); err != nil { return }
  return p.recvRemoveIfaceAddresses()
}

func (p *SystemServiceClient) sendRemoveIfaceAddresses(iface string, addrs []*ipprefix0.IpPrefix)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("removeIfaceAddresses", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SystemServiceRemoveIfaceAddressesArgs{
  Iface : iface,
  Addrs : addrs,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SystemServiceClient) recvRemoveIfaceAddresses() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "removeIfaceAddresses" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "removeIfaceAddresses failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "removeIfaceAddresses failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error8 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error9 error
    error9, err = error8.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error9
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeIfaceAddresses failed: invalid message type")
    return
  }
  result := SystemServiceRemoveIfaceAddressesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  return
}

// Parameters:
//  - Iface
//  - Family
//  - Scope
//  - Addrs
func (p *SystemServiceClient) SyncIfaceAddresses(iface string, family int16, scope int16, addrs []*ipprefix0.IpPrefix) (err error) {
  if err = p.sendSyncIfaceAddresses(iface, family, scope, addrs); err != nil { return }
  return p.recvSyncIfaceAddresses()
}

func (p *SystemServiceClient) sendSyncIfaceAddresses(iface string, family int16, scope int16, addrs []*ipprefix0.IpPrefix)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("syncIfaceAddresses", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SystemServiceSyncIfaceAddressesArgs{
  Iface : iface,
  Family : family,
  Scope : scope,
  Addrs : addrs,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SystemServiceClient) recvSyncIfaceAddresses() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "syncIfaceAddresses" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "syncIfaceAddresses failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "syncIfaceAddresses failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error10 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error11 error
    error11, err = error10.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error11
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "syncIfaceAddresses failed: invalid message type")
    return
  }
  result := SystemServiceSyncIfaceAddressesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  return
}

// Parameters:
//  - Iface
//  - Family
//  - Scope
func (p *SystemServiceClient) GetIfaceAddresses(iface string, family int16, scope int16) (r []*ipprefix0.IpPrefix, err error) {
  if err = p.sendGetIfaceAddresses(iface, family, scope); err != nil { return }
  return p.recvGetIfaceAddresses()
}

func (p *SystemServiceClient) sendGetIfaceAddresses(iface string, family int16, scope int16)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getIfaceAddresses", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SystemServiceGetIfaceAddressesArgs{
  Iface : iface,
  Family : family,
  Scope : scope,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SystemServiceClient) recvGetIfaceAddresses() (value []*ipprefix0.IpPrefix, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getIfaceAddresses" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getIfaceAddresses failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getIfaceAddresses failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error12 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error13 error
    error13, err = error12.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error13
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getIfaceAddresses failed: invalid message type")
    return
  }
  result := SystemServiceGetIfaceAddressesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  value = result.GetSuccess()
  return
}


//Thrift Service API definitions for on-box system information like links,
//addresses and neighbors. OpenR leverages links and address information as
//a part of link discovery and uses it to perform neighbor discovery on
//retrieved links. There is also PUB/SUB mechanism over which updates can be
//relayed to OpenR in realtime.
type SystemServiceThreadsafeClient struct {
  Transport thrift.Transport
  ProtocolFactory thrift.ProtocolFactory
  InputProtocol thrift.Protocol
  OutputProtocol thrift.Protocol
  SeqId int32
  Mu sync.Mutex
}

func NewSystemServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *SystemServiceThreadsafeClient {
  return &SystemServiceThreadsafeClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewSystemServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *SystemServiceThreadsafeClient {
  return &SystemServiceThreadsafeClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

func (p *SystemServiceThreadsafeClient) Threadsafe() {}

// SystemService client can query the following items:
// 1. query all links keyed by interface names
// 2. query all reachable neighbors
func (p *SystemServiceThreadsafeClient) GetAllLinks() (r []*Link, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetAllLinks(); err != nil { return }
  return p.recvGetAllLinks()
}

func (p *SystemServiceThreadsafeClient) sendGetAllLinks()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllLinks", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SystemServiceGetAllLinksArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SystemServiceThreadsafeClient) recvGetAllLinks() (value []*Link, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllLinks" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getAllLinks failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getAllLinks failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error14 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error15 error
    error15, err = error14.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error15
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllLinks failed: invalid message type")
    return
  }
  result := SystemServiceGetAllLinksResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  value = result.GetSuccess()
  return
}

func (p *SystemServiceThreadsafeClient) GetAllNeighbors() (r []*NeighborEntry, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetAllNeighbors(); err != nil { return }
  return p.recvGetAllNeighbors()
}

func (p *SystemServiceThreadsafeClient) sendGetAllNeighbors()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllNeighbors", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SystemServiceGetAllNeighborsArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SystemServiceThreadsafeClient) recvGetAllNeighbors() (value []*NeighborEntry, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllNeighbors" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getAllNeighbors failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getAllNeighbors failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error16 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error17 error
    error17, err = error16.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error17
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllNeighbors failed: invalid message type")
    return
  }
  result := SystemServiceGetAllNeighborsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  value = result.GetSuccess()
  return
}

// Backward compatibility has been considered
// As of now all the production platforms use our own SystemHandler
// New platforms need implement those interfaces based on the platform APIs
// 
// Parameters:
//  - Iface
//  - Addrs
func (p *SystemServiceThreadsafeClient) AddIfaceAddresses(iface string, addrs []*ipprefix0.IpPrefix) (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAddIfaceAddresses(iface, addrs); err != nil { return }
  return p.recvAddIfaceAddresses()
}

func (p *SystemServiceThreadsafeClient) sendAddIfaceAddresses(iface string, addrs []*ipprefix0.IpPrefix)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addIfaceAddresses", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SystemServiceAddIfaceAddressesArgs{
  Iface : iface,
  Addrs : addrs,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SystemServiceThreadsafeClient) recvAddIfaceAddresses() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addIfaceAddresses" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addIfaceAddresses failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addIfaceAddresses failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error18 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error19 error
    error19, err = error18.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error19
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addIfaceAddresses failed: invalid message type")
    return
  }
  result := SystemServiceAddIfaceAddressesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  return
}

// Parameters:
//  - Iface
//  - Addrs
func (p *SystemServiceThreadsafeClient) RemoveIfaceAddresses(iface string, addrs []*ipprefix0.IpPrefix) (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendRemoveIfaceAddresses(iface, addrs); err != nil { return }
  return p.recvRemoveIfaceAddresses()
}

func (p *SystemServiceThreadsafeClient) sendRemoveIfaceAddresses(iface string, addrs []*ipprefix0.IpPrefix)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("removeIfaceAddresses", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SystemServiceRemoveIfaceAddressesArgs{
  Iface : iface,
  Addrs : addrs,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SystemServiceThreadsafeClient) recvRemoveIfaceAddresses() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "removeIfaceAddresses" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "removeIfaceAddresses failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "removeIfaceAddresses failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error20 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error21 error
    error21, err = error20.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error21
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeIfaceAddresses failed: invalid message type")
    return
  }
  result := SystemServiceRemoveIfaceAddressesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  return
}

// Parameters:
//  - Iface
//  - Family
//  - Scope
//  - Addrs
func (p *SystemServiceThreadsafeClient) SyncIfaceAddresses(iface string, family int16, scope int16, addrs []*ipprefix0.IpPrefix) (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendSyncIfaceAddresses(iface, family, scope, addrs); err != nil { return }
  return p.recvSyncIfaceAddresses()
}

func (p *SystemServiceThreadsafeClient) sendSyncIfaceAddresses(iface string, family int16, scope int16, addrs []*ipprefix0.IpPrefix)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("syncIfaceAddresses", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SystemServiceSyncIfaceAddressesArgs{
  Iface : iface,
  Family : family,
  Scope : scope,
  Addrs : addrs,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SystemServiceThreadsafeClient) recvSyncIfaceAddresses() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "syncIfaceAddresses" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "syncIfaceAddresses failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "syncIfaceAddresses failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error22 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error23 error
    error23, err = error22.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error23
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "syncIfaceAddresses failed: invalid message type")
    return
  }
  result := SystemServiceSyncIfaceAddressesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  return
}

// Parameters:
//  - Iface
//  - Family
//  - Scope
func (p *SystemServiceThreadsafeClient) GetIfaceAddresses(iface string, family int16, scope int16) (r []*ipprefix0.IpPrefix, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetIfaceAddresses(iface, family, scope); err != nil { return }
  return p.recvGetIfaceAddresses()
}

func (p *SystemServiceThreadsafeClient) sendGetIfaceAddresses(iface string, family int16, scope int16)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getIfaceAddresses", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SystemServiceGetIfaceAddressesArgs{
  Iface : iface,
  Family : family,
  Scope : scope,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SystemServiceThreadsafeClient) recvGetIfaceAddresses() (value []*ipprefix0.IpPrefix, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getIfaceAddresses" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getIfaceAddresses failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getIfaceAddresses failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error24 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error25 error
    error25, err = error24.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error25
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getIfaceAddresses failed: invalid message type")
    return
  }
  result := SystemServiceGetIfaceAddressesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  value = result.GetSuccess()
  return
}


type SystemServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunction
  handler SystemService
}

func (p *SystemServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SystemServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *SystemServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
  return p.processorMap
}

func NewSystemServiceProcessor(handler SystemService) *SystemServiceProcessor {
  self26 := &SystemServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunction)}
  self26.processorMap["getAllLinks"] = &systemServiceProcessorGetAllLinks{handler:handler}
  self26.processorMap["getAllNeighbors"] = &systemServiceProcessorGetAllNeighbors{handler:handler}
  self26.processorMap["addIfaceAddresses"] = &systemServiceProcessorAddIfaceAddresses{handler:handler}
  self26.processorMap["removeIfaceAddresses"] = &systemServiceProcessorRemoveIfaceAddresses{handler:handler}
  self26.processorMap["syncIfaceAddresses"] = &systemServiceProcessorSyncIfaceAddresses{handler:handler}
  self26.processorMap["getIfaceAddresses"] = &systemServiceProcessorGetIfaceAddresses{handler:handler}
  return self26
}

type systemServiceProcessorGetAllLinks struct {
  handler SystemService
}

func (p *systemServiceProcessorGetAllLinks) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := SystemServiceGetAllLinksArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *systemServiceProcessorGetAllLinks) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch v := result.(type) {
  case *PlatformError:
    msg := SystemServiceGetAllLinksResult{Error_: v}
    result = &msg
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getAllLinks", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *systemServiceProcessorGetAllLinks) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var result SystemServiceGetAllLinksResult
  if retval, err := p.handler.GetAllLinks(); err != nil {
    switch v := err.(type) {
    case *PlatformError:
      result.Error_ = v
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllLinks: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type systemServiceProcessorGetAllNeighbors struct {
  handler SystemService
}

func (p *systemServiceProcessorGetAllNeighbors) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := SystemServiceGetAllNeighborsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *systemServiceProcessorGetAllNeighbors) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch v := result.(type) {
  case *PlatformError:
    msg := SystemServiceGetAllNeighborsResult{Error_: v}
    result = &msg
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getAllNeighbors", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *systemServiceProcessorGetAllNeighbors) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var result SystemServiceGetAllNeighborsResult
  if retval, err := p.handler.GetAllNeighbors(); err != nil {
    switch v := err.(type) {
    case *PlatformError:
      result.Error_ = v
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllNeighbors: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type systemServiceProcessorAddIfaceAddresses struct {
  handler SystemService
}

func (p *systemServiceProcessorAddIfaceAddresses) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := SystemServiceAddIfaceAddressesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *systemServiceProcessorAddIfaceAddresses) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch v := result.(type) {
  case *PlatformError:
    msg := SystemServiceAddIfaceAddressesResult{Error_: v}
    result = &msg
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addIfaceAddresses", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *systemServiceProcessorAddIfaceAddresses) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*SystemServiceAddIfaceAddressesArgs)
  var result SystemServiceAddIfaceAddressesResult
  if err := p.handler.AddIfaceAddresses(args.Iface, args.Addrs); err != nil {
    switch v := err.(type) {
    case *PlatformError:
      result.Error_ = v
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addIfaceAddresses: " + err.Error())
      return x, x
    }
  }
  return &result, nil
}

type systemServiceProcessorRemoveIfaceAddresses struct {
  handler SystemService
}

func (p *systemServiceProcessorRemoveIfaceAddresses) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := SystemServiceRemoveIfaceAddressesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *systemServiceProcessorRemoveIfaceAddresses) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch v := result.(type) {
  case *PlatformError:
    msg := SystemServiceRemoveIfaceAddressesResult{Error_: v}
    result = &msg
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("removeIfaceAddresses", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *systemServiceProcessorRemoveIfaceAddresses) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*SystemServiceRemoveIfaceAddressesArgs)
  var result SystemServiceRemoveIfaceAddressesResult
  if err := p.handler.RemoveIfaceAddresses(args.Iface, args.Addrs); err != nil {
    switch v := err.(type) {
    case *PlatformError:
      result.Error_ = v
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeIfaceAddresses: " + err.Error())
      return x, x
    }
  }
  return &result, nil
}

type systemServiceProcessorSyncIfaceAddresses struct {
  handler SystemService
}

func (p *systemServiceProcessorSyncIfaceAddresses) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := SystemServiceSyncIfaceAddressesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *systemServiceProcessorSyncIfaceAddresses) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch v := result.(type) {
  case *PlatformError:
    msg := SystemServiceSyncIfaceAddressesResult{Error_: v}
    result = &msg
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("syncIfaceAddresses", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *systemServiceProcessorSyncIfaceAddresses) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*SystemServiceSyncIfaceAddressesArgs)
  var result SystemServiceSyncIfaceAddressesResult
  if err := p.handler.SyncIfaceAddresses(args.Iface, args.Family, args.Scope, args.Addrs); err != nil {
    switch v := err.(type) {
    case *PlatformError:
      result.Error_ = v
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing syncIfaceAddresses: " + err.Error())
      return x, x
    }
  }
  return &result, nil
}

type systemServiceProcessorGetIfaceAddresses struct {
  handler SystemService
}

func (p *systemServiceProcessorGetIfaceAddresses) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := SystemServiceGetIfaceAddressesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *systemServiceProcessorGetIfaceAddresses) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch v := result.(type) {
  case *PlatformError:
    msg := SystemServiceGetIfaceAddressesResult{Error_: v}
    result = &msg
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getIfaceAddresses", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *systemServiceProcessorGetIfaceAddresses) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*SystemServiceGetIfaceAddressesArgs)
  var result SystemServiceGetIfaceAddressesResult
  if retval, err := p.handler.GetIfaceAddresses(args.Iface, args.Family, args.Scope); err != nil {
    switch v := err.(type) {
    case *PlatformError:
      result.Error_ = v
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getIfaceAddresses: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

type SystemServiceGetAllLinksArgs struct {
}

func NewSystemServiceGetAllLinksArgs() *SystemServiceGetAllLinksArgs {
  return &SystemServiceGetAllLinksArgs{}
}

func (p *SystemServiceGetAllLinksArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SystemServiceGetAllLinksArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getAllLinks_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SystemServiceGetAllLinksArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SystemServiceGetAllLinksArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error_
type SystemServiceGetAllLinksResult struct {
  Success []*Link `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error_ *PlatformError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewSystemServiceGetAllLinksResult() *SystemServiceGetAllLinksResult {
  return &SystemServiceGetAllLinksResult{}
}

var SystemServiceGetAllLinksResult_Success_DEFAULT []*Link

func (p *SystemServiceGetAllLinksResult) GetSuccess() []*Link {
  return p.Success
}
var SystemServiceGetAllLinksResult_Error__DEFAULT *PlatformError
func (p *SystemServiceGetAllLinksResult) GetError_() *PlatformError {
  if !p.IsSetError_() {
    return SystemServiceGetAllLinksResult_Error__DEFAULT
  }
return p.Error_
}
func (p *SystemServiceGetAllLinksResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SystemServiceGetAllLinksResult) IsSetError_() bool {
  return p.Error_ != nil
}

func (p *SystemServiceGetAllLinksResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SystemServiceGetAllLinksResult)  ReadField0(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Link, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem28 := NewLink()
    if err := _elem28.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem28), err)
    }
    p.Success = append(p.Success, _elem28)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SystemServiceGetAllLinksResult)  ReadField1(iprot thrift.Protocol) error {
  p.Error_ = NewPlatformError()
  if err := p.Error_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error_), err)
  }
  return nil
}

func (p *SystemServiceGetAllLinksResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getAllLinks_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SystemServiceGetAllLinksResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SystemServiceGetAllLinksResult) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetError_() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error_.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error_), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *SystemServiceGetAllLinksResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SystemServiceGetAllLinksResult(%+v)", *p)
}

type SystemServiceGetAllNeighborsArgs struct {
}

func NewSystemServiceGetAllNeighborsArgs() *SystemServiceGetAllNeighborsArgs {
  return &SystemServiceGetAllNeighborsArgs{}
}

func (p *SystemServiceGetAllNeighborsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SystemServiceGetAllNeighborsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getAllNeighbors_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SystemServiceGetAllNeighborsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SystemServiceGetAllNeighborsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error_
type SystemServiceGetAllNeighborsResult struct {
  Success []*NeighborEntry `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error_ *PlatformError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewSystemServiceGetAllNeighborsResult() *SystemServiceGetAllNeighborsResult {
  return &SystemServiceGetAllNeighborsResult{}
}

var SystemServiceGetAllNeighborsResult_Success_DEFAULT []*NeighborEntry

func (p *SystemServiceGetAllNeighborsResult) GetSuccess() []*NeighborEntry {
  return p.Success
}
var SystemServiceGetAllNeighborsResult_Error__DEFAULT *PlatformError
func (p *SystemServiceGetAllNeighborsResult) GetError_() *PlatformError {
  if !p.IsSetError_() {
    return SystemServiceGetAllNeighborsResult_Error__DEFAULT
  }
return p.Error_
}
func (p *SystemServiceGetAllNeighborsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SystemServiceGetAllNeighborsResult) IsSetError_() bool {
  return p.Error_ != nil
}

func (p *SystemServiceGetAllNeighborsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SystemServiceGetAllNeighborsResult)  ReadField0(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NeighborEntry, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem29 := NewNeighborEntry()
    if err := _elem29.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
    }
    p.Success = append(p.Success, _elem29)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SystemServiceGetAllNeighborsResult)  ReadField1(iprot thrift.Protocol) error {
  p.Error_ = NewPlatformError()
  if err := p.Error_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error_), err)
  }
  return nil
}

func (p *SystemServiceGetAllNeighborsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getAllNeighbors_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SystemServiceGetAllNeighborsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SystemServiceGetAllNeighborsResult) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetError_() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error_.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error_), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *SystemServiceGetAllNeighborsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SystemServiceGetAllNeighborsResult(%+v)", *p)
}

// Attributes:
//  - Iface
//  - Addrs
type SystemServiceAddIfaceAddressesArgs struct {
  Iface string `thrift:"iface,1" db:"iface" json:"iface"`
  Addrs []*ipprefix0.IpPrefix `thrift:"addrs,2" db:"addrs" json:"addrs"`
}

func NewSystemServiceAddIfaceAddressesArgs() *SystemServiceAddIfaceAddressesArgs {
  return &SystemServiceAddIfaceAddressesArgs{}
}


func (p *SystemServiceAddIfaceAddressesArgs) GetIface() string {
  return p.Iface
}

func (p *SystemServiceAddIfaceAddressesArgs) GetAddrs() []*ipprefix0.IpPrefix {
  return p.Addrs
}
func (p *SystemServiceAddIfaceAddressesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SystemServiceAddIfaceAddressesArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Iface = v
}
  return nil
}

func (p *SystemServiceAddIfaceAddressesArgs)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ipprefix0.IpPrefix, 0, size)
  p.Addrs =  tSlice
  for i := 0; i < size; i ++ {
    _elem30 := ipprefix0.NewIpPrefix()
    if err := _elem30.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
    }
    p.Addrs = append(p.Addrs, _elem30)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SystemServiceAddIfaceAddressesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addIfaceAddresses_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SystemServiceAddIfaceAddressesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("iface", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:iface: ", p), err) }
  if err := oprot.WriteString(string(p.Iface)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iface (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:iface: ", p), err) }
  return err
}

func (p *SystemServiceAddIfaceAddressesArgs) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("addrs", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:addrs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Addrs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Addrs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:addrs: ", p), err) }
  return err
}

func (p *SystemServiceAddIfaceAddressesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SystemServiceAddIfaceAddressesArgs(%+v)", *p)
}

// Attributes:
//  - Error_
type SystemServiceAddIfaceAddressesResult struct {
  Error_ *PlatformError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewSystemServiceAddIfaceAddressesResult() *SystemServiceAddIfaceAddressesResult {
  return &SystemServiceAddIfaceAddressesResult{}
}

var SystemServiceAddIfaceAddressesResult_Error__DEFAULT *PlatformError
func (p *SystemServiceAddIfaceAddressesResult) GetError_() *PlatformError {
  if !p.IsSetError_() {
    return SystemServiceAddIfaceAddressesResult_Error__DEFAULT
  }
return p.Error_
}
func (p *SystemServiceAddIfaceAddressesResult) IsSetError_() bool {
  return p.Error_ != nil
}

func (p *SystemServiceAddIfaceAddressesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SystemServiceAddIfaceAddressesResult)  ReadField1(iprot thrift.Protocol) error {
  p.Error_ = NewPlatformError()
  if err := p.Error_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error_), err)
  }
  return nil
}

func (p *SystemServiceAddIfaceAddressesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addIfaceAddresses_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SystemServiceAddIfaceAddressesResult) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetError_() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error_.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error_), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *SystemServiceAddIfaceAddressesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SystemServiceAddIfaceAddressesResult(%+v)", *p)
}

// Attributes:
//  - Iface
//  - Addrs
type SystemServiceRemoveIfaceAddressesArgs struct {
  Iface string `thrift:"iface,1" db:"iface" json:"iface"`
  Addrs []*ipprefix0.IpPrefix `thrift:"addrs,2" db:"addrs" json:"addrs"`
}

func NewSystemServiceRemoveIfaceAddressesArgs() *SystemServiceRemoveIfaceAddressesArgs {
  return &SystemServiceRemoveIfaceAddressesArgs{}
}


func (p *SystemServiceRemoveIfaceAddressesArgs) GetIface() string {
  return p.Iface
}

func (p *SystemServiceRemoveIfaceAddressesArgs) GetAddrs() []*ipprefix0.IpPrefix {
  return p.Addrs
}
func (p *SystemServiceRemoveIfaceAddressesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SystemServiceRemoveIfaceAddressesArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Iface = v
}
  return nil
}

func (p *SystemServiceRemoveIfaceAddressesArgs)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ipprefix0.IpPrefix, 0, size)
  p.Addrs =  tSlice
  for i := 0; i < size; i ++ {
    _elem31 := ipprefix0.NewIpPrefix()
    if err := _elem31.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem31), err)
    }
    p.Addrs = append(p.Addrs, _elem31)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SystemServiceRemoveIfaceAddressesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeIfaceAddresses_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SystemServiceRemoveIfaceAddressesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("iface", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:iface: ", p), err) }
  if err := oprot.WriteString(string(p.Iface)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iface (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:iface: ", p), err) }
  return err
}

func (p *SystemServiceRemoveIfaceAddressesArgs) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("addrs", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:addrs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Addrs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Addrs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:addrs: ", p), err) }
  return err
}

func (p *SystemServiceRemoveIfaceAddressesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SystemServiceRemoveIfaceAddressesArgs(%+v)", *p)
}

// Attributes:
//  - Error_
type SystemServiceRemoveIfaceAddressesResult struct {
  Error_ *PlatformError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewSystemServiceRemoveIfaceAddressesResult() *SystemServiceRemoveIfaceAddressesResult {
  return &SystemServiceRemoveIfaceAddressesResult{}
}

var SystemServiceRemoveIfaceAddressesResult_Error__DEFAULT *PlatformError
func (p *SystemServiceRemoveIfaceAddressesResult) GetError_() *PlatformError {
  if !p.IsSetError_() {
    return SystemServiceRemoveIfaceAddressesResult_Error__DEFAULT
  }
return p.Error_
}
func (p *SystemServiceRemoveIfaceAddressesResult) IsSetError_() bool {
  return p.Error_ != nil
}

func (p *SystemServiceRemoveIfaceAddressesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SystemServiceRemoveIfaceAddressesResult)  ReadField1(iprot thrift.Protocol) error {
  p.Error_ = NewPlatformError()
  if err := p.Error_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error_), err)
  }
  return nil
}

func (p *SystemServiceRemoveIfaceAddressesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeIfaceAddresses_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SystemServiceRemoveIfaceAddressesResult) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetError_() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error_.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error_), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *SystemServiceRemoveIfaceAddressesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SystemServiceRemoveIfaceAddressesResult(%+v)", *p)
}

// Attributes:
//  - Iface
//  - Family
//  - Scope
//  - Addrs
type SystemServiceSyncIfaceAddressesArgs struct {
  Iface string `thrift:"iface,1" db:"iface" json:"iface"`
  Family int16 `thrift:"family,2" db:"family" json:"family"`
  Scope int16 `thrift:"scope,3" db:"scope" json:"scope"`
  Addrs []*ipprefix0.IpPrefix `thrift:"addrs,4" db:"addrs" json:"addrs"`
}

func NewSystemServiceSyncIfaceAddressesArgs() *SystemServiceSyncIfaceAddressesArgs {
  return &SystemServiceSyncIfaceAddressesArgs{}
}


func (p *SystemServiceSyncIfaceAddressesArgs) GetIface() string {
  return p.Iface
}

func (p *SystemServiceSyncIfaceAddressesArgs) GetFamily() int16 {
  return p.Family
}

func (p *SystemServiceSyncIfaceAddressesArgs) GetScope() int16 {
  return p.Scope
}

func (p *SystemServiceSyncIfaceAddressesArgs) GetAddrs() []*ipprefix0.IpPrefix {
  return p.Addrs
}
func (p *SystemServiceSyncIfaceAddressesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SystemServiceSyncIfaceAddressesArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Iface = v
}
  return nil
}

func (p *SystemServiceSyncIfaceAddressesArgs)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Family = v
}
  return nil
}

func (p *SystemServiceSyncIfaceAddressesArgs)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Scope = v
}
  return nil
}

func (p *SystemServiceSyncIfaceAddressesArgs)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ipprefix0.IpPrefix, 0, size)
  p.Addrs =  tSlice
  for i := 0; i < size; i ++ {
    _elem32 := ipprefix0.NewIpPrefix()
    if err := _elem32.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem32), err)
    }
    p.Addrs = append(p.Addrs, _elem32)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SystemServiceSyncIfaceAddressesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("syncIfaceAddresses_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SystemServiceSyncIfaceAddressesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("iface", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:iface: ", p), err) }
  if err := oprot.WriteString(string(p.Iface)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iface (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:iface: ", p), err) }
  return err
}

func (p *SystemServiceSyncIfaceAddressesArgs) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("family", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:family: ", p), err) }
  if err := oprot.WriteI16(int16(p.Family)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.family (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:family: ", p), err) }
  return err
}

func (p *SystemServiceSyncIfaceAddressesArgs) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("scope", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:scope: ", p), err) }
  if err := oprot.WriteI16(int16(p.Scope)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scope (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:scope: ", p), err) }
  return err
}

func (p *SystemServiceSyncIfaceAddressesArgs) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("addrs", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:addrs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Addrs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Addrs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:addrs: ", p), err) }
  return err
}

func (p *SystemServiceSyncIfaceAddressesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SystemServiceSyncIfaceAddressesArgs(%+v)", *p)
}

// Attributes:
//  - Error_
type SystemServiceSyncIfaceAddressesResult struct {
  Error_ *PlatformError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewSystemServiceSyncIfaceAddressesResult() *SystemServiceSyncIfaceAddressesResult {
  return &SystemServiceSyncIfaceAddressesResult{}
}

var SystemServiceSyncIfaceAddressesResult_Error__DEFAULT *PlatformError
func (p *SystemServiceSyncIfaceAddressesResult) GetError_() *PlatformError {
  if !p.IsSetError_() {
    return SystemServiceSyncIfaceAddressesResult_Error__DEFAULT
  }
return p.Error_
}
func (p *SystemServiceSyncIfaceAddressesResult) IsSetError_() bool {
  return p.Error_ != nil
}

func (p *SystemServiceSyncIfaceAddressesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SystemServiceSyncIfaceAddressesResult)  ReadField1(iprot thrift.Protocol) error {
  p.Error_ = NewPlatformError()
  if err := p.Error_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error_), err)
  }
  return nil
}

func (p *SystemServiceSyncIfaceAddressesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("syncIfaceAddresses_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SystemServiceSyncIfaceAddressesResult) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetError_() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error_.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error_), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *SystemServiceSyncIfaceAddressesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SystemServiceSyncIfaceAddressesResult(%+v)", *p)
}

// Attributes:
//  - Iface
//  - Family
//  - Scope
type SystemServiceGetIfaceAddressesArgs struct {
  Iface string `thrift:"iface,1" db:"iface" json:"iface"`
  Family int16 `thrift:"family,2" db:"family" json:"family"`
  Scope int16 `thrift:"scope,3" db:"scope" json:"scope"`
}

func NewSystemServiceGetIfaceAddressesArgs() *SystemServiceGetIfaceAddressesArgs {
  return &SystemServiceGetIfaceAddressesArgs{}
}


func (p *SystemServiceGetIfaceAddressesArgs) GetIface() string {
  return p.Iface
}

func (p *SystemServiceGetIfaceAddressesArgs) GetFamily() int16 {
  return p.Family
}

func (p *SystemServiceGetIfaceAddressesArgs) GetScope() int16 {
  return p.Scope
}
func (p *SystemServiceGetIfaceAddressesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SystemServiceGetIfaceAddressesArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Iface = v
}
  return nil
}

func (p *SystemServiceGetIfaceAddressesArgs)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Family = v
}
  return nil
}

func (p *SystemServiceGetIfaceAddressesArgs)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Scope = v
}
  return nil
}

func (p *SystemServiceGetIfaceAddressesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getIfaceAddresses_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SystemServiceGetIfaceAddressesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("iface", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:iface: ", p), err) }
  if err := oprot.WriteString(string(p.Iface)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iface (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:iface: ", p), err) }
  return err
}

func (p *SystemServiceGetIfaceAddressesArgs) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("family", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:family: ", p), err) }
  if err := oprot.WriteI16(int16(p.Family)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.family (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:family: ", p), err) }
  return err
}

func (p *SystemServiceGetIfaceAddressesArgs) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("scope", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:scope: ", p), err) }
  if err := oprot.WriteI16(int16(p.Scope)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scope (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:scope: ", p), err) }
  return err
}

func (p *SystemServiceGetIfaceAddressesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SystemServiceGetIfaceAddressesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error_
type SystemServiceGetIfaceAddressesResult struct {
  Success []*ipprefix0.IpPrefix `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error_ *PlatformError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewSystemServiceGetIfaceAddressesResult() *SystemServiceGetIfaceAddressesResult {
  return &SystemServiceGetIfaceAddressesResult{}
}

var SystemServiceGetIfaceAddressesResult_Success_DEFAULT []*ipprefix0.IpPrefix

func (p *SystemServiceGetIfaceAddressesResult) GetSuccess() []*ipprefix0.IpPrefix {
  return p.Success
}
var SystemServiceGetIfaceAddressesResult_Error__DEFAULT *PlatformError
func (p *SystemServiceGetIfaceAddressesResult) GetError_() *PlatformError {
  if !p.IsSetError_() {
    return SystemServiceGetIfaceAddressesResult_Error__DEFAULT
  }
return p.Error_
}
func (p *SystemServiceGetIfaceAddressesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SystemServiceGetIfaceAddressesResult) IsSetError_() bool {
  return p.Error_ != nil
}

func (p *SystemServiceGetIfaceAddressesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SystemServiceGetIfaceAddressesResult)  ReadField0(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ipprefix0.IpPrefix, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem33 := ipprefix0.NewIpPrefix()
    if err := _elem33.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem33), err)
    }
    p.Success = append(p.Success, _elem33)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SystemServiceGetIfaceAddressesResult)  ReadField1(iprot thrift.Protocol) error {
  p.Error_ = NewPlatformError()
  if err := p.Error_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error_), err)
  }
  return nil
}

func (p *SystemServiceGetIfaceAddressesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getIfaceAddresses_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SystemServiceGetIfaceAddressesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SystemServiceGetIfaceAddressesResult) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetError_() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error_.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error_), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *SystemServiceGetIfaceAddressesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SystemServiceGetIfaceAddressesResult(%+v)", *p)
}


