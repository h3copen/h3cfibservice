// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package platform

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift-go"
	ipprefix0 "github.com/h3copen/h3cfibservice/gen-go/ipprefix"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = ipprefix0.GoUnusedProtection__
type FibService interface {  //Interface to on-box Fib.

  // Parameters:
  //  - ClientId
  //  - Route
  AddUnicastRoute(clientId int16, route *ipprefix0.UnicastRoute) (err error)
  // Parameters:
  //  - ClientId
  //  - Prefix
  DeleteUnicastRoute(clientId int16, prefix *ipprefix0.IpPrefix) (err error)
  // Parameters:
  //  - ClientId
  //  - Routes
  AddUnicastRoutes(clientId int16, routes []*ipprefix0.UnicastRoute) (err error)
  // Parameters:
  //  - ClientId
  //  - Prefixes
  DeleteUnicastRoutes(clientId int16, prefixes []*ipprefix0.IpPrefix) (err error)
  // Parameters:
  //  - ClientId
  //  - Routes
  SyncFib(clientId int16, routes []*ipprefix0.UnicastRoute) (err error)
  // DEPRECATED ... Use `aliveSince` API instead
  // openr should periodically call this to let Fib know that it is alive
  // 
  // Parameters:
  //  - ClientId
  PeriodicKeepAlive(clientId int16) (r int64, err error)
  // Returns the unix time that the service has been running since
  AliveSince() (r int64, err error)
  // Get the status of this service
  GetStatus() (r ServiceStatus, err error)
  // Get number of routes
  GetCounters() (r map[string]int64, err error)
  // Parameters:
  //  - ClientId
  GetRouteTableByClient(clientId int16) (r []*ipprefix0.UnicastRoute, err error)
}

//Interface to on-box Fib.
type FibServiceClient struct {
  Transport thrift.Transport
  ProtocolFactory thrift.ProtocolFactory
  InputProtocol thrift.Protocol
  OutputProtocol thrift.Protocol
  SeqId int32
}

func (client *FibServiceClient) Close() error {
  return client.Transport.Close()
}

func NewFibServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *FibServiceClient {
  return &FibServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewFibServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *FibServiceClient {
  return &FibServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - ClientId
//  - Route
func (p *FibServiceClient) AddUnicastRoute(clientId int16, route *ipprefix0.UnicastRoute) (err error) {
  if err = p.sendAddUnicastRoute(clientId, route); err != nil { return }
  return p.recvAddUnicastRoute()
}

func (p *FibServiceClient) sendAddUnicastRoute(clientId int16, route *ipprefix0.UnicastRoute)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addUnicastRoute", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceAddUnicastRouteArgs{
  ClientId : clientId,
  Route : route,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceClient) recvAddUnicastRoute() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addUnicastRoute" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addUnicastRoute failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addUnicastRoute failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error60 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error61 error
    error61, err = error60.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error61
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addUnicastRoute failed: invalid message type")
    return
  }
  result := FibServiceAddUnicastRouteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  return
}

// Parameters:
//  - ClientId
//  - Prefix
func (p *FibServiceClient) DeleteUnicastRoute(clientId int16, prefix *ipprefix0.IpPrefix) (err error) {
  if err = p.sendDeleteUnicastRoute(clientId, prefix); err != nil { return }
  return p.recvDeleteUnicastRoute()
}

func (p *FibServiceClient) sendDeleteUnicastRoute(clientId int16, prefix *ipprefix0.IpPrefix)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteUnicastRoute", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceDeleteUnicastRouteArgs{
  ClientId : clientId,
  Prefix : prefix,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceClient) recvDeleteUnicastRoute() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteUnicastRoute" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "deleteUnicastRoute failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "deleteUnicastRoute failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error62 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error63 error
    error63, err = error62.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error63
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteUnicastRoute failed: invalid message type")
    return
  }
  result := FibServiceDeleteUnicastRouteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  return
}

// Parameters:
//  - ClientId
//  - Routes
func (p *FibServiceClient) AddUnicastRoutes(clientId int16, routes []*ipprefix0.UnicastRoute) (err error) {
  if err = p.sendAddUnicastRoutes(clientId, routes); err != nil { return }
  return p.recvAddUnicastRoutes()
}

func (p *FibServiceClient) sendAddUnicastRoutes(clientId int16, routes []*ipprefix0.UnicastRoute)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addUnicastRoutes", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceAddUnicastRoutesArgs{
  ClientId : clientId,
  Routes : routes,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceClient) recvAddUnicastRoutes() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addUnicastRoutes" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addUnicastRoutes failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addUnicastRoutes failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error64 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error65 error
    error65, err = error64.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error65
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addUnicastRoutes failed: invalid message type")
    return
  }
  result := FibServiceAddUnicastRoutesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  return
}

// Parameters:
//  - ClientId
//  - Prefixes
func (p *FibServiceClient) DeleteUnicastRoutes(clientId int16, prefixes []*ipprefix0.IpPrefix) (err error) {
  if err = p.sendDeleteUnicastRoutes(clientId, prefixes); err != nil { return }
  return p.recvDeleteUnicastRoutes()
}

func (p *FibServiceClient) sendDeleteUnicastRoutes(clientId int16, prefixes []*ipprefix0.IpPrefix)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteUnicastRoutes", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceDeleteUnicastRoutesArgs{
  ClientId : clientId,
  Prefixes : prefixes,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceClient) recvDeleteUnicastRoutes() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteUnicastRoutes" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "deleteUnicastRoutes failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "deleteUnicastRoutes failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error66 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error67 error
    error67, err = error66.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error67
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteUnicastRoutes failed: invalid message type")
    return
  }
  result := FibServiceDeleteUnicastRoutesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  return
}

// Parameters:
//  - ClientId
//  - Routes
func (p *FibServiceClient) SyncFib(clientId int16, routes []*ipprefix0.UnicastRoute) (err error) {
  if err = p.sendSyncFib(clientId, routes); err != nil { return }
  return p.recvSyncFib()
}

func (p *FibServiceClient) sendSyncFib(clientId int16, routes []*ipprefix0.UnicastRoute)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("syncFib", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceSyncFibArgs{
  ClientId : clientId,
  Routes : routes,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceClient) recvSyncFib() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "syncFib" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "syncFib failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "syncFib failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error68 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error69 error
    error69, err = error68.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error69
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "syncFib failed: invalid message type")
    return
  }
  result := FibServiceSyncFibResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  return
}

// DEPRECATED ... Use `aliveSince` API instead
// openr should periodically call this to let Fib know that it is alive
// 
// Parameters:
//  - ClientId
func (p *FibServiceClient) PeriodicKeepAlive(clientId int16) (r int64, err error) {
  if err = p.sendPeriodicKeepAlive(clientId); err != nil { return }
  return p.recvPeriodicKeepAlive()
}

func (p *FibServiceClient) sendPeriodicKeepAlive(clientId int16)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("periodicKeepAlive", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServicePeriodicKeepAliveArgs{
  ClientId : clientId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceClient) recvPeriodicKeepAlive() (value int64, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "periodicKeepAlive" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "periodicKeepAlive failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "periodicKeepAlive failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error70 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error71 error
    error71, err = error70.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error71
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "periodicKeepAlive failed: invalid message type")
    return
  }
  result := FibServicePeriodicKeepAliveResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Returns the unix time that the service has been running since
func (p *FibServiceClient) AliveSince() (r int64, err error) {
  if err = p.sendAliveSince(); err != nil { return }
  return p.recvAliveSince()
}

func (p *FibServiceClient) sendAliveSince()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("aliveSince", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceAliveSinceArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceClient) recvAliveSince() (value int64, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "aliveSince" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "aliveSince failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "aliveSince failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error72 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error73 error
    error73, err = error72.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error73
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "aliveSince failed: invalid message type")
    return
  }
  result := FibServiceAliveSinceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Get the status of this service
func (p *FibServiceClient) GetStatus() (r ServiceStatus, err error) {
  if err = p.sendGetStatus(); err != nil { return }
  return p.recvGetStatus()
}

func (p *FibServiceClient) sendGetStatus()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getStatus", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceGetStatusArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceClient) recvGetStatus() (value ServiceStatus, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getStatus" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getStatus failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getStatus failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error74 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error75 error
    error75, err = error74.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error75
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getStatus failed: invalid message type")
    return
  }
  result := FibServiceGetStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Get number of routes
func (p *FibServiceClient) GetCounters() (r map[string]int64, err error) {
  if err = p.sendGetCounters(); err != nil { return }
  return p.recvGetCounters()
}

func (p *FibServiceClient) sendGetCounters()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getCounters", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceGetCountersArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceClient) recvGetCounters() (value map[string]int64, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getCounters" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getCounters failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getCounters failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error76 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error77 error
    error77, err = error76.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error77
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCounters failed: invalid message type")
    return
  }
  result := FibServiceGetCountersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - ClientId
func (p *FibServiceClient) GetRouteTableByClient(clientId int16) (r []*ipprefix0.UnicastRoute, err error) {
  if err = p.sendGetRouteTableByClient(clientId); err != nil { return }
  return p.recvGetRouteTableByClient()
}

func (p *FibServiceClient) sendGetRouteTableByClient(clientId int16)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getRouteTableByClient", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceGetRouteTableByClientArgs{
  ClientId : clientId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceClient) recvGetRouteTableByClient() (value []*ipprefix0.UnicastRoute, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getRouteTableByClient" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getRouteTableByClient failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getRouteTableByClient failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error78 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error79 error
    error79, err = error78.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error79
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getRouteTableByClient failed: invalid message type")
    return
  }
  result := FibServiceGetRouteTableByClientResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  value = result.GetSuccess()
  return
}


//Interface to on-box Fib.
type FibServiceThreadsafeClient struct {
  Transport thrift.Transport
  ProtocolFactory thrift.ProtocolFactory
  InputProtocol thrift.Protocol
  OutputProtocol thrift.Protocol
  SeqId int32
  Mu sync.Mutex
}

func NewFibServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *FibServiceThreadsafeClient {
  return &FibServiceThreadsafeClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewFibServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *FibServiceThreadsafeClient {
  return &FibServiceThreadsafeClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

func (p *FibServiceThreadsafeClient) Threadsafe() {}

// Parameters:
//  - ClientId
//  - Route
func (p *FibServiceThreadsafeClient) AddUnicastRoute(clientId int16, route *ipprefix0.UnicastRoute) (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAddUnicastRoute(clientId, route); err != nil { return }
  return p.recvAddUnicastRoute()
}

func (p *FibServiceThreadsafeClient) sendAddUnicastRoute(clientId int16, route *ipprefix0.UnicastRoute)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addUnicastRoute", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceAddUnicastRouteArgs{
  ClientId : clientId,
  Route : route,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceThreadsafeClient) recvAddUnicastRoute() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addUnicastRoute" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addUnicastRoute failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addUnicastRoute failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error80 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error81 error
    error81, err = error80.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error81
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addUnicastRoute failed: invalid message type")
    return
  }
  result := FibServiceAddUnicastRouteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  return
}

// Parameters:
//  - ClientId
//  - Prefix
func (p *FibServiceThreadsafeClient) DeleteUnicastRoute(clientId int16, prefix *ipprefix0.IpPrefix) (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendDeleteUnicastRoute(clientId, prefix); err != nil { return }
  return p.recvDeleteUnicastRoute()
}

func (p *FibServiceThreadsafeClient) sendDeleteUnicastRoute(clientId int16, prefix *ipprefix0.IpPrefix)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteUnicastRoute", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceDeleteUnicastRouteArgs{
  ClientId : clientId,
  Prefix : prefix,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceThreadsafeClient) recvDeleteUnicastRoute() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteUnicastRoute" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "deleteUnicastRoute failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "deleteUnicastRoute failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error82 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error83 error
    error83, err = error82.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error83
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteUnicastRoute failed: invalid message type")
    return
  }
  result := FibServiceDeleteUnicastRouteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  return
}

// Parameters:
//  - ClientId
//  - Routes
func (p *FibServiceThreadsafeClient) AddUnicastRoutes(clientId int16, routes []*ipprefix0.UnicastRoute) (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAddUnicastRoutes(clientId, routes); err != nil { return }
  return p.recvAddUnicastRoutes()
}

func (p *FibServiceThreadsafeClient) sendAddUnicastRoutes(clientId int16, routes []*ipprefix0.UnicastRoute)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addUnicastRoutes", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceAddUnicastRoutesArgs{
  ClientId : clientId,
  Routes : routes,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceThreadsafeClient) recvAddUnicastRoutes() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addUnicastRoutes" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addUnicastRoutes failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addUnicastRoutes failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error84 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error85 error
    error85, err = error84.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error85
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addUnicastRoutes failed: invalid message type")
    return
  }
  result := FibServiceAddUnicastRoutesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  return
}

// Parameters:
//  - ClientId
//  - Prefixes
func (p *FibServiceThreadsafeClient) DeleteUnicastRoutes(clientId int16, prefixes []*ipprefix0.IpPrefix) (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendDeleteUnicastRoutes(clientId, prefixes); err != nil { return }
  return p.recvDeleteUnicastRoutes()
}

func (p *FibServiceThreadsafeClient) sendDeleteUnicastRoutes(clientId int16, prefixes []*ipprefix0.IpPrefix)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteUnicastRoutes", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceDeleteUnicastRoutesArgs{
  ClientId : clientId,
  Prefixes : prefixes,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceThreadsafeClient) recvDeleteUnicastRoutes() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteUnicastRoutes" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "deleteUnicastRoutes failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "deleteUnicastRoutes failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error86 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error87 error
    error87, err = error86.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error87
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteUnicastRoutes failed: invalid message type")
    return
  }
  result := FibServiceDeleteUnicastRoutesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  return
}

// Parameters:
//  - ClientId
//  - Routes
func (p *FibServiceThreadsafeClient) SyncFib(clientId int16, routes []*ipprefix0.UnicastRoute) (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendSyncFib(clientId, routes); err != nil { return }
  return p.recvSyncFib()
}

func (p *FibServiceThreadsafeClient) sendSyncFib(clientId int16, routes []*ipprefix0.UnicastRoute)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("syncFib", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceSyncFibArgs{
  ClientId : clientId,
  Routes : routes,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceThreadsafeClient) recvSyncFib() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "syncFib" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "syncFib failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "syncFib failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error88 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error89 error
    error89, err = error88.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error89
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "syncFib failed: invalid message type")
    return
  }
  result := FibServiceSyncFibResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  return
}

// DEPRECATED ... Use `aliveSince` API instead
// openr should periodically call this to let Fib know that it is alive
// 
// Parameters:
//  - ClientId
func (p *FibServiceThreadsafeClient) PeriodicKeepAlive(clientId int16) (r int64, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendPeriodicKeepAlive(clientId); err != nil { return }
  return p.recvPeriodicKeepAlive()
}

func (p *FibServiceThreadsafeClient) sendPeriodicKeepAlive(clientId int16)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("periodicKeepAlive", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServicePeriodicKeepAliveArgs{
  ClientId : clientId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceThreadsafeClient) recvPeriodicKeepAlive() (value int64, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "periodicKeepAlive" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "periodicKeepAlive failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "periodicKeepAlive failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error90 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error91 error
    error91, err = error90.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error91
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "periodicKeepAlive failed: invalid message type")
    return
  }
  result := FibServicePeriodicKeepAliveResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Returns the unix time that the service has been running since
func (p *FibServiceThreadsafeClient) AliveSince() (r int64, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAliveSince(); err != nil { return }
  return p.recvAliveSince()
}

func (p *FibServiceThreadsafeClient) sendAliveSince()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("aliveSince", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceAliveSinceArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceThreadsafeClient) recvAliveSince() (value int64, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "aliveSince" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "aliveSince failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "aliveSince failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error92 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error93 error
    error93, err = error92.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error93
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "aliveSince failed: invalid message type")
    return
  }
  result := FibServiceAliveSinceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Get the status of this service
func (p *FibServiceThreadsafeClient) GetStatus() (r ServiceStatus, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetStatus(); err != nil { return }
  return p.recvGetStatus()
}

func (p *FibServiceThreadsafeClient) sendGetStatus()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getStatus", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceGetStatusArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceThreadsafeClient) recvGetStatus() (value ServiceStatus, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getStatus" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getStatus failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getStatus failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error94 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error95 error
    error95, err = error94.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error95
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getStatus failed: invalid message type")
    return
  }
  result := FibServiceGetStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Get number of routes
func (p *FibServiceThreadsafeClient) GetCounters() (r map[string]int64, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetCounters(); err != nil { return }
  return p.recvGetCounters()
}

func (p *FibServiceThreadsafeClient) sendGetCounters()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getCounters", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceGetCountersArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceThreadsafeClient) recvGetCounters() (value map[string]int64, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getCounters" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getCounters failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getCounters failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error96 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error97 error
    error97, err = error96.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error97
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCounters failed: invalid message type")
    return
  }
  result := FibServiceGetCountersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - ClientId
func (p *FibServiceThreadsafeClient) GetRouteTableByClient(clientId int16) (r []*ipprefix0.UnicastRoute, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetRouteTableByClient(clientId); err != nil { return }
  return p.recvGetRouteTableByClient()
}

func (p *FibServiceThreadsafeClient) sendGetRouteTableByClient(clientId int16)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getRouteTableByClient", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FibServiceGetRouteTableByClientArgs{
  ClientId : clientId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FibServiceThreadsafeClient) recvGetRouteTableByClient() (value []*ipprefix0.UnicastRoute, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getRouteTableByClient" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getRouteTableByClient failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getRouteTableByClient failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error98 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error99 error
    error99, err = error98.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error99
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getRouteTableByClient failed: invalid message type")
    return
  }
  result := FibServiceGetRouteTableByClientResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error_ != nil {
    err = result.Error_
    return 
  }
  value = result.GetSuccess()
  return
}


type FibServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunction
  handler FibService
}

func (p *FibServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *FibServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *FibServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
  return p.processorMap
}

func NewFibServiceProcessor(handler FibService) *FibServiceProcessor {
  self100 := &FibServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunction)}
  self100.processorMap["addUnicastRoute"] = &fibServiceProcessorAddUnicastRoute{handler:handler}
  self100.processorMap["deleteUnicastRoute"] = &fibServiceProcessorDeleteUnicastRoute{handler:handler}
  self100.processorMap["addUnicastRoutes"] = &fibServiceProcessorAddUnicastRoutes{handler:handler}
  self100.processorMap["deleteUnicastRoutes"] = &fibServiceProcessorDeleteUnicastRoutes{handler:handler}
  self100.processorMap["syncFib"] = &fibServiceProcessorSyncFib{handler:handler}
  self100.processorMap["periodicKeepAlive"] = &fibServiceProcessorPeriodicKeepAlive{handler:handler}
  self100.processorMap["aliveSince"] = &fibServiceProcessorAliveSince{handler:handler}
  self100.processorMap["getStatus"] = &fibServiceProcessorGetStatus{handler:handler}
  self100.processorMap["getCounters"] = &fibServiceProcessorGetCounters{handler:handler}
  self100.processorMap["getRouteTableByClient"] = &fibServiceProcessorGetRouteTableByClient{handler:handler}
  return self100
}

type fibServiceProcessorAddUnicastRoute struct {
  handler FibService
}

func (p *fibServiceProcessorAddUnicastRoute) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := FibServiceAddUnicastRouteArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *fibServiceProcessorAddUnicastRoute) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch v := result.(type) {
  case *PlatformError:
    msg := FibServiceAddUnicastRouteResult{Error_: v}
    result = &msg
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addUnicastRoute", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *fibServiceProcessorAddUnicastRoute) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*FibServiceAddUnicastRouteArgs)
  var result FibServiceAddUnicastRouteResult
  if err := p.handler.AddUnicastRoute(args.ClientId, args.Route); err != nil {
    switch v := err.(type) {
    case *PlatformError:
      result.Error_ = v
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addUnicastRoute: " + err.Error())
      return x, x
    }
  }
  return &result, nil
}

type fibServiceProcessorDeleteUnicastRoute struct {
  handler FibService
}

func (p *fibServiceProcessorDeleteUnicastRoute) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := FibServiceDeleteUnicastRouteArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *fibServiceProcessorDeleteUnicastRoute) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch v := result.(type) {
  case *PlatformError:
    msg := FibServiceDeleteUnicastRouteResult{Error_: v}
    result = &msg
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("deleteUnicastRoute", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *fibServiceProcessorDeleteUnicastRoute) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*FibServiceDeleteUnicastRouteArgs)
  var result FibServiceDeleteUnicastRouteResult
  if err := p.handler.DeleteUnicastRoute(args.ClientId, args.Prefix); err != nil {
    switch v := err.(type) {
    case *PlatformError:
      result.Error_ = v
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteUnicastRoute: " + err.Error())
      return x, x
    }
  }
  return &result, nil
}

type fibServiceProcessorAddUnicastRoutes struct {
  handler FibService
}

func (p *fibServiceProcessorAddUnicastRoutes) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := FibServiceAddUnicastRoutesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *fibServiceProcessorAddUnicastRoutes) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch v := result.(type) {
  case *PlatformError:
    msg := FibServiceAddUnicastRoutesResult{Error_: v}
    result = &msg
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addUnicastRoutes", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *fibServiceProcessorAddUnicastRoutes) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*FibServiceAddUnicastRoutesArgs)
  var result FibServiceAddUnicastRoutesResult
  if err := p.handler.AddUnicastRoutes(args.ClientId, args.Routes); err != nil {
    switch v := err.(type) {
    case *PlatformError:
      result.Error_ = v
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addUnicastRoutes: " + err.Error())
      return x, x
    }
  }
  return &result, nil
}

type fibServiceProcessorDeleteUnicastRoutes struct {
  handler FibService
}

func (p *fibServiceProcessorDeleteUnicastRoutes) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := FibServiceDeleteUnicastRoutesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *fibServiceProcessorDeleteUnicastRoutes) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch v := result.(type) {
  case *PlatformError:
    msg := FibServiceDeleteUnicastRoutesResult{Error_: v}
    result = &msg
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("deleteUnicastRoutes", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *fibServiceProcessorDeleteUnicastRoutes) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*FibServiceDeleteUnicastRoutesArgs)
  var result FibServiceDeleteUnicastRoutesResult
  if err := p.handler.DeleteUnicastRoutes(args.ClientId, args.Prefixes); err != nil {
    switch v := err.(type) {
    case *PlatformError:
      result.Error_ = v
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteUnicastRoutes: " + err.Error())
      return x, x
    }
  }
  return &result, nil
}

type fibServiceProcessorSyncFib struct {
  handler FibService
}

func (p *fibServiceProcessorSyncFib) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := FibServiceSyncFibArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *fibServiceProcessorSyncFib) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch v := result.(type) {
  case *PlatformError:
    msg := FibServiceSyncFibResult{Error_: v}
    result = &msg
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("syncFib", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *fibServiceProcessorSyncFib) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*FibServiceSyncFibArgs)
  var result FibServiceSyncFibResult
  if err := p.handler.SyncFib(args.ClientId, args.Routes); err != nil {
    switch v := err.(type) {
    case *PlatformError:
      result.Error_ = v
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing syncFib: " + err.Error())
      return x, x
    }
  }
  return &result, nil
}

type fibServiceProcessorPeriodicKeepAlive struct {
  handler FibService
}

func (p *fibServiceProcessorPeriodicKeepAlive) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := FibServicePeriodicKeepAliveArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *fibServiceProcessorPeriodicKeepAlive) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("periodicKeepAlive", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *fibServiceProcessorPeriodicKeepAlive) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*FibServicePeriodicKeepAliveArgs)
  var result FibServicePeriodicKeepAliveResult
  if retval, err := p.handler.PeriodicKeepAlive(args.ClientId); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing periodicKeepAlive: " + err.Error())
      return x, x
    }
  } else {
    result.Success = &retval
  }
  return &result, nil
}

type fibServiceProcessorAliveSince struct {
  handler FibService
}

func (p *fibServiceProcessorAliveSince) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := FibServiceAliveSinceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *fibServiceProcessorAliveSince) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("aliveSince", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *fibServiceProcessorAliveSince) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var result FibServiceAliveSinceResult
  if retval, err := p.handler.AliveSince(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing aliveSince: " + err.Error())
      return x, x
    }
  } else {
    result.Success = &retval
  }
  return &result, nil
}

type fibServiceProcessorGetStatus struct {
  handler FibService
}

func (p *fibServiceProcessorGetStatus) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := FibServiceGetStatusArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *fibServiceProcessorGetStatus) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getStatus", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *fibServiceProcessorGetStatus) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var result FibServiceGetStatusResult
  if retval, err := p.handler.GetStatus(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStatus: " + err.Error())
      return x, x
    }
  } else {
    result.Success = &retval
  }
  return &result, nil
}

type fibServiceProcessorGetCounters struct {
  handler FibService
}

func (p *fibServiceProcessorGetCounters) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := FibServiceGetCountersArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *fibServiceProcessorGetCounters) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getCounters", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *fibServiceProcessorGetCounters) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var result FibServiceGetCountersResult
  if retval, err := p.handler.GetCounters(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCounters: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type fibServiceProcessorGetRouteTableByClient struct {
  handler FibService
}

func (p *fibServiceProcessorGetRouteTableByClient) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := FibServiceGetRouteTableByClientArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *fibServiceProcessorGetRouteTableByClient) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch v := result.(type) {
  case *PlatformError:
    msg := FibServiceGetRouteTableByClientResult{Error_: v}
    result = &msg
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getRouteTableByClient", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *fibServiceProcessorGetRouteTableByClient) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*FibServiceGetRouteTableByClientArgs)
  var result FibServiceGetRouteTableByClientResult
  if retval, err := p.handler.GetRouteTableByClient(args.ClientId); err != nil {
    switch v := err.(type) {
    case *PlatformError:
      result.Error_ = v
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRouteTableByClient: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ClientId
//  - Route
type FibServiceAddUnicastRouteArgs struct {
  ClientId int16 `thrift:"clientId,1" db:"clientId" json:"clientId"`
  Route *ipprefix0.UnicastRoute `thrift:"route,2" db:"route" json:"route"`
}

func NewFibServiceAddUnicastRouteArgs() *FibServiceAddUnicastRouteArgs {
  return &FibServiceAddUnicastRouteArgs{
Route: ipprefix0.NewUnicastRoute(),
}
}


func (p *FibServiceAddUnicastRouteArgs) GetClientId() int16 {
  return p.ClientId
}
var FibServiceAddUnicastRouteArgs_Route_DEFAULT *ipprefix0.UnicastRoute
func (p *FibServiceAddUnicastRouteArgs) GetRoute() *ipprefix0.UnicastRoute {
  if !p.IsSetRoute() {
    return FibServiceAddUnicastRouteArgs_Route_DEFAULT
  }
return p.Route
}
func (p *FibServiceAddUnicastRouteArgs) IsSetRoute() bool {
  return p.Route != nil
}

func (p *FibServiceAddUnicastRouteArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceAddUnicastRouteArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClientId = v
}
  return nil
}

func (p *FibServiceAddUnicastRouteArgs)  ReadField2(iprot thrift.Protocol) error {
  p.Route = ipprefix0.NewUnicastRoute()
  if err := p.Route.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Route), err)
  }
  return nil
}

func (p *FibServiceAddUnicastRouteArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addUnicastRoute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceAddUnicastRouteArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clientId", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clientId: ", p), err) }
  if err := oprot.WriteI16(int16(p.ClientId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clientId: ", p), err) }
  return err
}

func (p *FibServiceAddUnicastRouteArgs) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("route", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:route: ", p), err) }
  if err := p.Route.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Route), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:route: ", p), err) }
  return err
}

func (p *FibServiceAddUnicastRouteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceAddUnicastRouteArgs(%+v)", *p)
}

// Attributes:
//  - Error_
type FibServiceAddUnicastRouteResult struct {
  Error_ *PlatformError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewFibServiceAddUnicastRouteResult() *FibServiceAddUnicastRouteResult {
  return &FibServiceAddUnicastRouteResult{}
}

var FibServiceAddUnicastRouteResult_Error__DEFAULT *PlatformError
func (p *FibServiceAddUnicastRouteResult) GetError_() *PlatformError {
  if !p.IsSetError_() {
    return FibServiceAddUnicastRouteResult_Error__DEFAULT
  }
return p.Error_
}
func (p *FibServiceAddUnicastRouteResult) IsSetError_() bool {
  return p.Error_ != nil
}

func (p *FibServiceAddUnicastRouteResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceAddUnicastRouteResult)  ReadField1(iprot thrift.Protocol) error {
  p.Error_ = NewPlatformError()
  if err := p.Error_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error_), err)
  }
  return nil
}

func (p *FibServiceAddUnicastRouteResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addUnicastRoute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceAddUnicastRouteResult) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetError_() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error_.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error_), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *FibServiceAddUnicastRouteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceAddUnicastRouteResult(%+v)", *p)
}

// Attributes:
//  - ClientId
//  - Prefix
type FibServiceDeleteUnicastRouteArgs struct {
  ClientId int16 `thrift:"clientId,1" db:"clientId" json:"clientId"`
  Prefix *ipprefix0.IpPrefix `thrift:"prefix,2" db:"prefix" json:"prefix"`
}

func NewFibServiceDeleteUnicastRouteArgs() *FibServiceDeleteUnicastRouteArgs {
  return &FibServiceDeleteUnicastRouteArgs{
Prefix: ipprefix0.NewIpPrefix(),
}
}


func (p *FibServiceDeleteUnicastRouteArgs) GetClientId() int16 {
  return p.ClientId
}
var FibServiceDeleteUnicastRouteArgs_Prefix_DEFAULT *ipprefix0.IpPrefix
func (p *FibServiceDeleteUnicastRouteArgs) GetPrefix() *ipprefix0.IpPrefix {
  if !p.IsSetPrefix() {
    return FibServiceDeleteUnicastRouteArgs_Prefix_DEFAULT
  }
return p.Prefix
}
func (p *FibServiceDeleteUnicastRouteArgs) IsSetPrefix() bool {
  return p.Prefix != nil
}

func (p *FibServiceDeleteUnicastRouteArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceDeleteUnicastRouteArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClientId = v
}
  return nil
}

func (p *FibServiceDeleteUnicastRouteArgs)  ReadField2(iprot thrift.Protocol) error {
  p.Prefix = ipprefix0.NewIpPrefix()
  if err := p.Prefix.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Prefix), err)
  }
  return nil
}

func (p *FibServiceDeleteUnicastRouteArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("deleteUnicastRoute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceDeleteUnicastRouteArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clientId", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clientId: ", p), err) }
  if err := oprot.WriteI16(int16(p.ClientId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clientId: ", p), err) }
  return err
}

func (p *FibServiceDeleteUnicastRouteArgs) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("prefix", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:prefix: ", p), err) }
  if err := p.Prefix.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Prefix), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:prefix: ", p), err) }
  return err
}

func (p *FibServiceDeleteUnicastRouteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceDeleteUnicastRouteArgs(%+v)", *p)
}

// Attributes:
//  - Error_
type FibServiceDeleteUnicastRouteResult struct {
  Error_ *PlatformError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewFibServiceDeleteUnicastRouteResult() *FibServiceDeleteUnicastRouteResult {
  return &FibServiceDeleteUnicastRouteResult{}
}

var FibServiceDeleteUnicastRouteResult_Error__DEFAULT *PlatformError
func (p *FibServiceDeleteUnicastRouteResult) GetError_() *PlatformError {
  if !p.IsSetError_() {
    return FibServiceDeleteUnicastRouteResult_Error__DEFAULT
  }
return p.Error_
}
func (p *FibServiceDeleteUnicastRouteResult) IsSetError_() bool {
  return p.Error_ != nil
}

func (p *FibServiceDeleteUnicastRouteResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceDeleteUnicastRouteResult)  ReadField1(iprot thrift.Protocol) error {
  p.Error_ = NewPlatformError()
  if err := p.Error_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error_), err)
  }
  return nil
}

func (p *FibServiceDeleteUnicastRouteResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("deleteUnicastRoute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceDeleteUnicastRouteResult) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetError_() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error_.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error_), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *FibServiceDeleteUnicastRouteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceDeleteUnicastRouteResult(%+v)", *p)
}

// Attributes:
//  - ClientId
//  - Routes
type FibServiceAddUnicastRoutesArgs struct {
  ClientId int16 `thrift:"clientId,1" db:"clientId" json:"clientId"`
  Routes []*ipprefix0.UnicastRoute `thrift:"routes,2" db:"routes" json:"routes"`
}

func NewFibServiceAddUnicastRoutesArgs() *FibServiceAddUnicastRoutesArgs {
  return &FibServiceAddUnicastRoutesArgs{}
}


func (p *FibServiceAddUnicastRoutesArgs) GetClientId() int16 {
  return p.ClientId
}

func (p *FibServiceAddUnicastRoutesArgs) GetRoutes() []*ipprefix0.UnicastRoute {
  return p.Routes
}
func (p *FibServiceAddUnicastRoutesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceAddUnicastRoutesArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClientId = v
}
  return nil
}

func (p *FibServiceAddUnicastRoutesArgs)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ipprefix0.UnicastRoute, 0, size)
  p.Routes =  tSlice
  for i := 0; i < size; i ++ {
    _elem102 := ipprefix0.NewUnicastRoute()
    if err := _elem102.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem102), err)
    }
    p.Routes = append(p.Routes, _elem102)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FibServiceAddUnicastRoutesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addUnicastRoutes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceAddUnicastRoutesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clientId", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clientId: ", p), err) }
  if err := oprot.WriteI16(int16(p.ClientId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clientId: ", p), err) }
  return err
}

func (p *FibServiceAddUnicastRoutesArgs) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("routes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:routes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Routes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Routes {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:routes: ", p), err) }
  return err
}

func (p *FibServiceAddUnicastRoutesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceAddUnicastRoutesArgs(%+v)", *p)
}

// Attributes:
//  - Error_
type FibServiceAddUnicastRoutesResult struct {
  Error_ *PlatformError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewFibServiceAddUnicastRoutesResult() *FibServiceAddUnicastRoutesResult {
  return &FibServiceAddUnicastRoutesResult{}
}

var FibServiceAddUnicastRoutesResult_Error__DEFAULT *PlatformError
func (p *FibServiceAddUnicastRoutesResult) GetError_() *PlatformError {
  if !p.IsSetError_() {
    return FibServiceAddUnicastRoutesResult_Error__DEFAULT
  }
return p.Error_
}
func (p *FibServiceAddUnicastRoutesResult) IsSetError_() bool {
  return p.Error_ != nil
}

func (p *FibServiceAddUnicastRoutesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceAddUnicastRoutesResult)  ReadField1(iprot thrift.Protocol) error {
  p.Error_ = NewPlatformError()
  if err := p.Error_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error_), err)
  }
  return nil
}

func (p *FibServiceAddUnicastRoutesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addUnicastRoutes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceAddUnicastRoutesResult) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetError_() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error_.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error_), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *FibServiceAddUnicastRoutesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceAddUnicastRoutesResult(%+v)", *p)
}

// Attributes:
//  - ClientId
//  - Prefixes
type FibServiceDeleteUnicastRoutesArgs struct {
  ClientId int16 `thrift:"clientId,1" db:"clientId" json:"clientId"`
  Prefixes []*ipprefix0.IpPrefix `thrift:"prefixes,2" db:"prefixes" json:"prefixes"`
}

func NewFibServiceDeleteUnicastRoutesArgs() *FibServiceDeleteUnicastRoutesArgs {
  return &FibServiceDeleteUnicastRoutesArgs{}
}


func (p *FibServiceDeleteUnicastRoutesArgs) GetClientId() int16 {
  return p.ClientId
}

func (p *FibServiceDeleteUnicastRoutesArgs) GetPrefixes() []*ipprefix0.IpPrefix {
  return p.Prefixes
}
func (p *FibServiceDeleteUnicastRoutesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceDeleteUnicastRoutesArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClientId = v
}
  return nil
}

func (p *FibServiceDeleteUnicastRoutesArgs)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ipprefix0.IpPrefix, 0, size)
  p.Prefixes =  tSlice
  for i := 0; i < size; i ++ {
    _elem103 := ipprefix0.NewIpPrefix()
    if err := _elem103.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem103), err)
    }
    p.Prefixes = append(p.Prefixes, _elem103)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FibServiceDeleteUnicastRoutesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("deleteUnicastRoutes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceDeleteUnicastRoutesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clientId", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clientId: ", p), err) }
  if err := oprot.WriteI16(int16(p.ClientId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clientId: ", p), err) }
  return err
}

func (p *FibServiceDeleteUnicastRoutesArgs) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("prefixes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:prefixes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Prefixes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Prefixes {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:prefixes: ", p), err) }
  return err
}

func (p *FibServiceDeleteUnicastRoutesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceDeleteUnicastRoutesArgs(%+v)", *p)
}

// Attributes:
//  - Error_
type FibServiceDeleteUnicastRoutesResult struct {
  Error_ *PlatformError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewFibServiceDeleteUnicastRoutesResult() *FibServiceDeleteUnicastRoutesResult {
  return &FibServiceDeleteUnicastRoutesResult{}
}

var FibServiceDeleteUnicastRoutesResult_Error__DEFAULT *PlatformError
func (p *FibServiceDeleteUnicastRoutesResult) GetError_() *PlatformError {
  if !p.IsSetError_() {
    return FibServiceDeleteUnicastRoutesResult_Error__DEFAULT
  }
return p.Error_
}
func (p *FibServiceDeleteUnicastRoutesResult) IsSetError_() bool {
  return p.Error_ != nil
}

func (p *FibServiceDeleteUnicastRoutesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceDeleteUnicastRoutesResult)  ReadField1(iprot thrift.Protocol) error {
  p.Error_ = NewPlatformError()
  if err := p.Error_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error_), err)
  }
  return nil
}

func (p *FibServiceDeleteUnicastRoutesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("deleteUnicastRoutes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceDeleteUnicastRoutesResult) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetError_() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error_.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error_), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *FibServiceDeleteUnicastRoutesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceDeleteUnicastRoutesResult(%+v)", *p)
}

// Attributes:
//  - ClientId
//  - Routes
type FibServiceSyncFibArgs struct {
  ClientId int16 `thrift:"clientId,1" db:"clientId" json:"clientId"`
  Routes []*ipprefix0.UnicastRoute `thrift:"routes,2" db:"routes" json:"routes"`
}

func NewFibServiceSyncFibArgs() *FibServiceSyncFibArgs {
  return &FibServiceSyncFibArgs{}
}


func (p *FibServiceSyncFibArgs) GetClientId() int16 {
  return p.ClientId
}

func (p *FibServiceSyncFibArgs) GetRoutes() []*ipprefix0.UnicastRoute {
  return p.Routes
}
func (p *FibServiceSyncFibArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceSyncFibArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClientId = v
}
  return nil
}

func (p *FibServiceSyncFibArgs)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ipprefix0.UnicastRoute, 0, size)
  p.Routes =  tSlice
  for i := 0; i < size; i ++ {
    _elem104 := ipprefix0.NewUnicastRoute()
    if err := _elem104.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem104), err)
    }
    p.Routes = append(p.Routes, _elem104)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FibServiceSyncFibArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("syncFib_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceSyncFibArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clientId", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clientId: ", p), err) }
  if err := oprot.WriteI16(int16(p.ClientId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clientId: ", p), err) }
  return err
}

func (p *FibServiceSyncFibArgs) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("routes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:routes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Routes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Routes {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:routes: ", p), err) }
  return err
}

func (p *FibServiceSyncFibArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceSyncFibArgs(%+v)", *p)
}

// Attributes:
//  - Error_
type FibServiceSyncFibResult struct {
  Error_ *PlatformError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewFibServiceSyncFibResult() *FibServiceSyncFibResult {
  return &FibServiceSyncFibResult{}
}

var FibServiceSyncFibResult_Error__DEFAULT *PlatformError
func (p *FibServiceSyncFibResult) GetError_() *PlatformError {
  if !p.IsSetError_() {
    return FibServiceSyncFibResult_Error__DEFAULT
  }
return p.Error_
}
func (p *FibServiceSyncFibResult) IsSetError_() bool {
  return p.Error_ != nil
}

func (p *FibServiceSyncFibResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceSyncFibResult)  ReadField1(iprot thrift.Protocol) error {
  p.Error_ = NewPlatformError()
  if err := p.Error_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error_), err)
  }
  return nil
}

func (p *FibServiceSyncFibResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("syncFib_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceSyncFibResult) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetError_() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error_.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error_), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *FibServiceSyncFibResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceSyncFibResult(%+v)", *p)
}

// Attributes:
//  - ClientId
type FibServicePeriodicKeepAliveArgs struct {
  ClientId int16 `thrift:"clientId,1" db:"clientId" json:"clientId"`
}

func NewFibServicePeriodicKeepAliveArgs() *FibServicePeriodicKeepAliveArgs {
  return &FibServicePeriodicKeepAliveArgs{}
}


func (p *FibServicePeriodicKeepAliveArgs) GetClientId() int16 {
  return p.ClientId
}
func (p *FibServicePeriodicKeepAliveArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServicePeriodicKeepAliveArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClientId = v
}
  return nil
}

func (p *FibServicePeriodicKeepAliveArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("periodicKeepAlive_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServicePeriodicKeepAliveArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clientId", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clientId: ", p), err) }
  if err := oprot.WriteI16(int16(p.ClientId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clientId: ", p), err) }
  return err
}

func (p *FibServicePeriodicKeepAliveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServicePeriodicKeepAliveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FibServicePeriodicKeepAliveResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFibServicePeriodicKeepAliveResult() *FibServicePeriodicKeepAliveResult {
  return &FibServicePeriodicKeepAliveResult{}
}

var FibServicePeriodicKeepAliveResult_Success_DEFAULT int64
func (p *FibServicePeriodicKeepAliveResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return FibServicePeriodicKeepAliveResult_Success_DEFAULT
  }
return *p.Success
}
func (p *FibServicePeriodicKeepAliveResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FibServicePeriodicKeepAliveResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServicePeriodicKeepAliveResult)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *FibServicePeriodicKeepAliveResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("periodicKeepAlive_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServicePeriodicKeepAliveResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FibServicePeriodicKeepAliveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServicePeriodicKeepAliveResult(%+v)", *p)
}

type FibServiceAliveSinceArgs struct {
}

func NewFibServiceAliveSinceArgs() *FibServiceAliveSinceArgs {
  return &FibServiceAliveSinceArgs{}
}

func (p *FibServiceAliveSinceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceAliveSinceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("aliveSince_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceAliveSinceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceAliveSinceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FibServiceAliveSinceResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFibServiceAliveSinceResult() *FibServiceAliveSinceResult {
  return &FibServiceAliveSinceResult{}
}

var FibServiceAliveSinceResult_Success_DEFAULT int64
func (p *FibServiceAliveSinceResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return FibServiceAliveSinceResult_Success_DEFAULT
  }
return *p.Success
}
func (p *FibServiceAliveSinceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FibServiceAliveSinceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceAliveSinceResult)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *FibServiceAliveSinceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("aliveSince_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceAliveSinceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FibServiceAliveSinceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceAliveSinceResult(%+v)", *p)
}

type FibServiceGetStatusArgs struct {
}

func NewFibServiceGetStatusArgs() *FibServiceGetStatusArgs {
  return &FibServiceGetStatusArgs{}
}

func (p *FibServiceGetStatusArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceGetStatusArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceGetStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceGetStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FibServiceGetStatusResult struct {
  Success *ServiceStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFibServiceGetStatusResult() *FibServiceGetStatusResult {
  return &FibServiceGetStatusResult{}
}

var FibServiceGetStatusResult_Success_DEFAULT ServiceStatus
func (p *FibServiceGetStatusResult) GetSuccess() ServiceStatus {
  if !p.IsSetSuccess() {
    return FibServiceGetStatusResult_Success_DEFAULT
  }
return *p.Success
}
func (p *FibServiceGetStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FibServiceGetStatusResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceGetStatusResult)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := ServiceStatus(v)
  p.Success = &temp
}
  return nil
}

func (p *FibServiceGetStatusResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceGetStatusResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FibServiceGetStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceGetStatusResult(%+v)", *p)
}

type FibServiceGetCountersArgs struct {
}

func NewFibServiceGetCountersArgs() *FibServiceGetCountersArgs {
  return &FibServiceGetCountersArgs{}
}

func (p *FibServiceGetCountersArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceGetCountersArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getCounters_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceGetCountersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceGetCountersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FibServiceGetCountersResult struct {
  Success map[string]int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFibServiceGetCountersResult() *FibServiceGetCountersResult {
  return &FibServiceGetCountersResult{}
}

var FibServiceGetCountersResult_Success_DEFAULT map[string]int64

func (p *FibServiceGetCountersResult) GetSuccess() map[string]int64 {
  return p.Success
}
func (p *FibServiceGetCountersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FibServiceGetCountersResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceGetCountersResult)  ReadField0(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key105 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key105 = v
}
var _val106 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val106 = v
}
    p.Success[_key105] = _val106
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *FibServiceGetCountersResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getCounters_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceGetCountersResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FibServiceGetCountersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceGetCountersResult(%+v)", *p)
}

// Attributes:
//  - ClientId
type FibServiceGetRouteTableByClientArgs struct {
  ClientId int16 `thrift:"clientId,1" db:"clientId" json:"clientId"`
}

func NewFibServiceGetRouteTableByClientArgs() *FibServiceGetRouteTableByClientArgs {
  return &FibServiceGetRouteTableByClientArgs{}
}


func (p *FibServiceGetRouteTableByClientArgs) GetClientId() int16 {
  return p.ClientId
}
func (p *FibServiceGetRouteTableByClientArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceGetRouteTableByClientArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClientId = v
}
  return nil
}

func (p *FibServiceGetRouteTableByClientArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getRouteTableByClient_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceGetRouteTableByClientArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clientId", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clientId: ", p), err) }
  if err := oprot.WriteI16(int16(p.ClientId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clientId: ", p), err) }
  return err
}

func (p *FibServiceGetRouteTableByClientArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceGetRouteTableByClientArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error_
type FibServiceGetRouteTableByClientResult struct {
  Success []*ipprefix0.UnicastRoute `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error_ *PlatformError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewFibServiceGetRouteTableByClientResult() *FibServiceGetRouteTableByClientResult {
  return &FibServiceGetRouteTableByClientResult{}
}

var FibServiceGetRouteTableByClientResult_Success_DEFAULT []*ipprefix0.UnicastRoute

func (p *FibServiceGetRouteTableByClientResult) GetSuccess() []*ipprefix0.UnicastRoute {
  return p.Success
}
var FibServiceGetRouteTableByClientResult_Error__DEFAULT *PlatformError
func (p *FibServiceGetRouteTableByClientResult) GetError_() *PlatformError {
  if !p.IsSetError_() {
    return FibServiceGetRouteTableByClientResult_Error__DEFAULT
  }
return p.Error_
}
func (p *FibServiceGetRouteTableByClientResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FibServiceGetRouteTableByClientResult) IsSetError_() bool {
  return p.Error_ != nil
}

func (p *FibServiceGetRouteTableByClientResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FibServiceGetRouteTableByClientResult)  ReadField0(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ipprefix0.UnicastRoute, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem107 := ipprefix0.NewUnicastRoute()
    if err := _elem107.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem107), err)
    }
    p.Success = append(p.Success, _elem107)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FibServiceGetRouteTableByClientResult)  ReadField1(iprot thrift.Protocol) error {
  p.Error_ = NewPlatformError()
  if err := p.Error_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error_), err)
  }
  return nil
}

func (p *FibServiceGetRouteTableByClientResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getRouteTableByClient_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FibServiceGetRouteTableByClientResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FibServiceGetRouteTableByClientResult) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetError_() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error_.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error_), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *FibServiceGetRouteTableByClientResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FibServiceGetRouteTableByClientResult(%+v)", *p)
}


